on:
  push:
    branches: [master]
  pull_request:
name: test

# cancel on going checks when new code is pushed
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

env:
  CARGO_INCREMENTAL: 0
  CARGO_TERM_COLOR: always
  TEST_DATABASE_USERNAME: root
  TEST_DATABASE_URL: localhost:8000
  TEST_DATABASE_PASSWORD: root
  TEST_DATABASE_NAME: root
  TEST_DATABASE_NAMESPACE: ci-tests
  TEST_REDIS_HOST: redis://localhost:6379
  MEILISEARCH_HOST: http://localhost:7700
  MEILISEARCH_API_KEY:

jobs:
  required:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:alpine
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      meilisearch:
        image: getmeili/meilisearch
        # Set health checks to wait until meilisearch has started
        options: >-
          --health-cmd "curl -f 'http://localhost:7700'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7700:7700
    name: ubuntu / ${{ matrix.toolchain }}
    strategy:
      matrix:
        toolchain: [stable, beta]
    steps:
      - name: install surreal
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh
          surreal start --log trace --auth --user $TEST_DATABASE_USERNAME --pass $TEST_DATABASE_PASSWORD memory &
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.toolchain }}
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo test --locked
        run: cargo test --locked --all-features --all-targets
      - name: cargo test --doc
        run: cargo test --locked --all-features --doc

  os-check:
    runs-on: ${{ matrix.os }}
    name: ${{ matrix.os }} / stable
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
      - name: cargo generate-lockfile
        if: hashFiles('Cargo.lock') == ''
        run: cargo generate-lockfile
      - name: cargo test --workspace
        run: cargo test --no-run --workspace --locked --all-features --all-targets

  coverage:
    runs-on: ubuntu-latest
    name: ubuntu / stable / coverage
    services:
      redis:
        image: redis:alpine
        # Set health checks to wait until redis has started
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
      meilisearch:
        image: getmeili/meilisearch
        # Set health checks to wait until meilisearch has started
        options: >-
          --health-cmd "curl -f 'http://localhost:7700'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 7700:7700
    steps:
      - name: install surreal
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://install.surrealdb.com | sh
          surreal start --log trace --auth --user $TEST_DATABASE_USERNAME --pass $TEST_DATABASE_PASSWORD memory &
      - uses: actions/checkout@v4
      - name: Install stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      - name: cargo install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov
      - name: cargo llvm-cov
        run: cargo llvm-cov --workspace --locked --all-features --lcov --output-path lcov.info
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v4
        with:
          fail_ci_if_error: true
          token: ${{secrets.CODECOV_TOKEN}}
